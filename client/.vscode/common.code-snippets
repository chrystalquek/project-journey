{
  // Place your client workspace snippets here. Each snippet is defined under a snippet name and has a scope, prefix, body and
  // description. Add comma separated ids of the languages where the snippet is applicable in the scope field. If scope
  // is left empty or omitted, the snippet gets applied to all languages. The prefix is what is
  // used to trigger the snippet and the body will be expanded and inserted. Possible variables are:
  // $1, $2 for tab stops, $0 for the final cursor position, and ${1:label}, ${2:another} for placeholders.
  // Placeholders with the same ids are connected.
  // Example:
  // "Print to console": {
  // 	"scope": "javascript,typescript",
  // 	"prefix": "log",
  // 	"body": [
  // 		"console.log('$1');",
  // 		"$2"
  // 	],
  // 	"description": "Log output to console"
  // }

  "Create redux reducer with adapter": {
    "prefix": "reducer",
    "scope": "typescript",
    "body": [
      "import { FetchStatus, StoreState } from '@redux/store';",
      "import {",
      "  createEntityAdapter,",
      "  createSlice,",
      "  isFulfilled,",
      "  isPending,",
      "  isRejected,",
      "} from '@reduxjs/toolkit';",
      "import { ${TM_FILENAME_BASE/(.*)/${1:/capitalize}/}Data } from '@type/${TM_FILENAME_BASE}';",
      "import { isDefined } from '@utils/helpers/typescript';",
      "",
      "const ${TM_FILENAME_BASE}sAdapter = createEntityAdapter<${TM_FILENAME_BASE/(.*)/${1:/capitalize}/}Data>({",
      "  selectId: (${TM_FILENAME_BASE}) => ${TM_FILENAME_BASE}._id,",
      "});",
      "",
      "export type ${TM_FILENAME_BASE/(.*)/${1:/capitalize}/}State = {",
      "  status: FetchStatus | null;",
      "};",
      "",
      "const initialState = ${TM_FILENAME_BASE}sAdapter.getInitialState<${TM_FILENAME_BASE/(.*)/${1:/capitalize}/}State>({",
      "  status: null,",
      "});",
      "",
      "const ${TM_FILENAME_BASE}Slice = createSlice({",
      "  name: '${TM_FILENAME_BASE}',",
      "  initialState,",
      "  reducers: {},",
      "  extraReducers: (builder) => {",
      "    builder.addMatcher(isPending(), (state) => {",
      "      state.status = 'pending';",
      "    });",
      "    builder.addMatcher(isFulfilled(), (state) => {",
      "      state.status = 'fulfilled';",
      "    });",
      "    builder.addMatcher(isRejected(), (state) => {",
      "      state.status = 'rejected';",
      "    });",
      "  },",
      "});",
      "",
      "export default ${TM_FILENAME_BASE}Slice.reducer;",
      "",
      "export const { selectById: select${TM_FILENAME_BASE/(.*)/${1:/capitalize}/}ById, selectAll: selectAll${TM_FILENAME_BASE/(.*)/${1:/capitalize}/}s } =",
      "  ${TM_FILENAME_BASE}sAdapter.getSelectors((state: StoreState) => state.${TM_FILENAME_BASE});",
      "",
      "export const select${TM_FILENAME_BASE/(.*)/${1:/capitalize}/}sByIds = (state: StoreState, ids: string[]) =>",
      "  ids.map((id) => select${TM_FILENAME_BASE/(.*)/${1:/capitalize}/}ById(state, id)).filter(isDefined);",
      ""
    ]
  }
}
